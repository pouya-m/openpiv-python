pyprocess:
	1- when (search_area > window_size) there is a problem calculating the correlation because window_a 
	and window_b arrangement is not implemented correctly (we go beyond the image bounds in the i,j loops).
	-> Done.

pyprocess.get_coordinates:
	if the goal is to make the output of the program compatible with other programs(i.e. Tecplot), then
	the standard for grid progression is to start from (xmin,ymax) and increase the x while keeping y 
	value constant and then move ahead with the next (lower) y value until we get to the end (xmax,ymin).
	
	- change the y values order to match this convention. ->Done.
	
	- fft optimization:
	using pyfftw code may result in 3x faster speeds in fft calculation. However these speeds are reported
	for ffts for large arrays (minimum:1024*1024) not repeated ffts of small arrays (64*64) like the ones 
	that we have. Therefore this should be tested and timed.
	good refference at: https://hgomersall.github.io/pyFFTW/pyfftw/pyfftw.html#pyfftw.FFTW
	
	
tools.save:
	- add a header to saved data to specify the variables, grid size, zone type, ... this will make the
	output directly readable with tecplot. -> Done.
	
	
tools.display_vector_filed:
	- change the tools.display_vector_filed to ignore the new header and also work with the new data order
	(y values). -> Done.
		
	- show the number of bad vectors in the data when displaying the vector field. -> Done.
		
		
tools.display_windows_sampling:
	- don't know what it's trying to do exactly but it gets too crowded to be usefull. It should draw a 
	simple grid to show the interogation windows. we should also have the original image in the background
	so that we can see the particle density in each cell.
		
		
validation:
	in this module there should be a tool to detect bad vectores simply by comparing them with the 
	neiboring vectors and if they differ by a large amount, then they should be added to the bad vectors
	mask. -> this is already implemented in the code with validation.local_median_val
	
	
Spectra:
	New module for postprocessing:
	- pointFFT: function to derive Fourier transform results of u and v velocity at a specific point in
	the flow. -> Done. needs final validation.

	- pointSTFT: function to derive short-time Fourier transform of u and v velocity at a specific point
	in the flow. -> Done. needs final validation.
	
	- GAS: function to derive Global Autospectral Density(all points in the flow at defferent frequencies).
		-> Done. needs final validation.
	
	
tools.rotate:
	New function
	- add a tool to flip and rotate the flow field.
	
POD:
	New module for post processing:
	- develop some tools to do the Proper Orthogonal Decomposition

	
	
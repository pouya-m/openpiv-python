To do:
----------
1- incrporate the lib.py into the libariry and test -> done. seems to be working
2- clean up the folders and files -> done.
3- update read me file -> done.
4- create a setup.py script -> done.
5- setup the project on PyPI
5- setup instructions for users (PyPI) and devs (local library) -> done. it's in the readme
6- survey the mother code to check for major improvments to be incorporated (new piv methods) -> done. there are some but not very important changes.
7- freeze development for this weeks presentation
8- write proper test routines for different functions

GUI:
- include other piv algorythms like multipass piv and window deformation
- complete the masking section(static and dynamic)

---------

- fft optimization:
	using pyfftw code may result in 3x faster speeds in fft calculation. However these speeds are reported
	for ffts for large arrays (minimum:1024*1024) not repeated ffts of small arrays (64*64) like the ones 
	that we have. Therefore this should be tested and timed.
	good refference at: https://hgomersall.github.io/pyFFTW/pyfftw/pyfftw.html#pyfftw.FFTW
	
		
tools.display_windows_sampling:
	- don't know what it's trying to do exactly but it gets too crowded to be usefull. It should draw a 
	simple grid to show the interogation windows. we should also have the original image in the background
	so that we can see the particle density in each cell.
	
	
Spectra:
	New module for postprocessing:
	- point_fft: function to derive Fourier transform results of u and v velocity at a specific point in
	the flow. -> Done. needs final validation and refactoring.

	- point_stft: function to derive short-time Fourier transform of u and v velocity at a specific point
	in the flow. -> Done. needs final validation and refactoring.
	
	- global_spectra: function to derive Global Autospectral Density(all points in the flow at defferent frequencies).
		-> Done. needs final validation and refactoring.
	
		- add the compatibleto identify and return the point where the maximum GAS occures so that, the point
		can be further analyzed by pointFFT and pointSTFT functions.

		- add the code to also calculate and save the mean velocity flow field.

- GUI for validation process. -> I wrote the script to help perform the validation fairly straight forward, but it requires
	multiple runs and we have to open Tecplot and look at the results between each iteration. -> a GUI would be sweet!
	
	
tools:
	
	- New function to calculate the vorticity field. it's "simple and accurate" to calculate the vorticity
	in Tecplot, but calculating it in Python should be available in case we need to process the vorticity data.

	- New function to handle the construction of file paths to be analyzed by different parts of the program.
	It should be compatible by the file system used by insight4G. --> Partially Done. (in the ValidationProcess.py)


Finished:
-----------
pyprocess:
	- when (search_area > window_size) there is a problem calculating the correlation because window_a 
	and window_b arrangement is not implemented correctly (we go beyond the image bounds in the i,j loops).
	-> Corrected.

pyprocess.get_coordinates:
	- change the y values order to match this convention used in tecplot. ->Done.

	- add a header to saved data to specify the variables, grid size, zone type, ... this will make the
	output directly readable with tecplot. -> Done.

	- New tool to read the already processed data and recreate the field variables (x, y, u, v, mask) -> Done.

	- change the tools.display_vector_filed to ignore the new header and also work with the new data order
	(y values). -> Done.
		
	- show the number of bad vectors in the data when displaying the vector field. -> Done.

POD:
	New module for post processing:
	- modal_svd: function to conduct modal analysis using Singular Value Decomposition method. saving the modes
	and their coresponding coefficients. -> Done and validated, may need further refactoring.

	- modal_snapshot: function to conduct modal analysis using snapshots method. saving the modes and their
	coresponding coefficients -> Done and validated, may need further refactoring.

	- reconstruct_field: function to reconstruct the flow fields using certain number of modes. -> Done.

- New function manipulate_field: a tool to flip and rotate the flow field. -> Added to tools. Done.

	- New function read_data: a function to read the previously analyzed data -> Added to tools. Done.